# Lee datos en forma continua desde una tabla (t1) y escribe en ES
#
# ts en segundos formato Epoch <<< Mas resolucion !
#
# Comporamiento dual (server, one-shot) - $SERVER 1 : Si | 0 : No
# Depuracion                            - $DEBUG  1 : Si | 0 : No
#
# Falta: logging (inicio, errores, fin)
#

use strict;
use warnings;
use DBI;
use DateTime;
use Storable;
use Config::Tiny;
use Try::Tiny;
use Search::Elasticsearch;
use Data::Dumper;
use lib '/home/jtrumper/perl5/lib/perl5';
use Mojo::JSON qw(encode_json);

my $DEBUG=1;    # 1 : Si | 0 : No

# Server o on-shot (por una sola vez)
my $SERVER = shift;  # 1 : Si | 0 : No
my $MODE= ($SERVER == 1 ? "Server" : "Una-vez");

# Lee configuracion
my $configfilename = shift || 'sql2ls.conf';
my $Config = Config::Tiny->new;
$Config = Config::Tiny->read( $configfilename );
my $version     = $Config->{_}->{version};
my $DELAY       = $Config->{_}->{delay} || 5;
my $persistfile = $Config->{_}->{persist_filename};
my $logfile     = $Config->{_}->{log_filename};
my $SQLQUERY    = $Config->{origen}->{sql_query};
my $TS_COLNAME  = $Config->{origen}->{timestamp_col_name};
my $COLNAMES    = $Config->{origen}->{colname_list};

# ES
my $HOSTS       = $Config->{es_server}->{es_nodes};
my $PORT        = $Config->{es_server}->{es_port};
my $INDEXNAME   =  $Config->{es_server}->{es_indexname};

my @colnames    = split(',',$COLNAMES);
$SQLQUERY .= " AND $TS_COLNAME >= ?";

# Logging inicial
print "Iniciando $0 - ver. $version | Modo: $MODE ...\n";
print "delay              : $DELAY [s]\n";
print "sql_query          : $SQLQUERY\n";
print "timestamp_col_name : ${TS_COLNAME}\n";
print "persist_filename   : $persistfile\n";
print "log_filename       : $logfile\n";
print "SQL                : $SQLQUERY\n";


# Logging (pendiente ... ) <<<<<<<<<<<
if ( $SERVER  ) {
  print "logeando ...\n";
}

# Coneccion a la fuente de datos
my $database='otrs';
my $hostname='10.34.16.111';  # OTRS
my $password='password';
my $user    = 'jtrumper';

my $dsn = "DBI:mysql:database=$database;host=$hostname"; #;port=$port";
my $dbh = DBI->connect($dsn, $user, $password, { RaiseError => 1, AutoCommit => 1 })
                or die $DBI::errstr;

#my $dbfile = 'cached.db';
#my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","", { RaiseError => 1})
#                or die $DBI::errstr;

# Conexion x ODBC
#my $dbh = DBI->connect('dbi:ODBC:DSN=mydsn', $user, $password, { RaiseError => 1}) 
#                or die $DBI::errstr;

# Conexion a ES
my $e = Search::Elasticsearch->new(
    nodes => [
                "$HOSTS:$PORT"
             ],
    trace_to => 'Stderr'
);

# Obtiene ultimo timestamp extraido 
my $lastime;
try {
  my $hashref = retrieve($persistfile);   
  $lastime = $$hashref;                  
  $lastime = 0;
} catch {
  $lastime = 0;
  #die "error: $_"; # not $@
};
print "lastime inicial    : ".$lastime."\n";


my $json;
my $response;
# Main
while ( 1 ) {
    my $sth = $dbh->prepare( $SQLQUERY );
    $sth->bind_param( 1, $lastime );
    $sth->execute();
    while (my $row = $sth->fetchrow_arrayref()) {
        $lastime = DateTime->now->epoch;                 
        #$lastime =  @$row[0];
        print "last [ $lastime ] : fila: ". join(',',@$row). "\n"; # @$row[0] @$row[1] @$row[2] @$row[3]\n";
        $json = array2json( $row );
        print "-----------------------------------------------------\n"; if $DEBUG;
        print "$json\n\n";   if $DEBUG;
        print "-----------------------------------------------------\n"; if $DEBUG;
#=begin
        $response = $e->index(
                    index   => $INDEXNAME,
                    type    => 'etl_test',
                    body    => $json 
#                    body    => { 
#                                  #lastime       => $lastime,  # opcional pero util en depuracion (ojo formato int)
#                                  create_time   => @$row[0], 
#                                  ticket_id     => @$row[1], 
#                                  owner_id      => @$row[2],
#                                  name          => @$row[3]
#                               }
                );
#=cut
        print localtime().": respuesta: ".($response->{result})."\n";
        if ( $response->{result} eq 'created' ) {
            store \$lastime, $persistfile;
        } else {
            print "========================\n";
            print "Error al registrar en ES\n";
            print "========================\n";
        }
    }
    $sth->finish();
    print localtime().": esperando nuevas filas, posteriores a [ $lastime ] ...\n";
    sleep $DELAY;
    exit if ( ! $SERVER ); 
}


$dbh->disconnect();

sub array2json {
    my $rcolvals = shift;
    my @colvals  = @$rcolvals;
    my $toj;
    for ( my $i=0; $i<scalar(@colvals); ++$i) {
        $toj .= "$colnames[$i] => '$colvals[$i]'\,";
    }
    $toj =~ s/\,$//;
    my $tojson = encode_json { eval $toj };
    return $tojson;
}

